datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Categoria {
  agua
  gaseosas
  frugos
  papas
  Otros
}

model Producto {
  id             String           @id @default(cuid())
  imagen         String
  nombre         String
  precioVenta    Float
  peso           Float
  precioCompra   Float
  stock          Int
  categoria      Categoria        @default(Otros) // Valor por defecto añadido
  ventaProductos VentaProducto[] // Relación inversa con VentaProducto
  Bonificacion   Bonificacion[]
  Proveedor      Proveedor?       @relation(fields: [proveedorId], references: [id])
  proveedorId    String?
  CompraProducto CompraProducto[]
}

model Cliente {
  id              String   @id @default(uuid()) // Identificador único
  tipoDocumento   String
  codigoCliente   String   @unique
  lugar           String
  direccion       String
  numeroDocumento String   @unique
  nombre          String
  createdAt       DateTime @default(now()) // Fecha de creación
  ventas          Venta[] // Relación inversa con Venta
}

model Venta {
  id             String          @id @default(uuid())
  cliente        Cliente         @relation(fields: [clienteId], references: [id])
  clienteId      String
  productos      VentaProducto[] // Relación con VentaProducto
  total          Float
  utilidad       Float
  fecha          DateTime        @default(now())
  usuario        Usuario?        @relation(fields: [usuarioId], references: [id]) // Relación opcional
  usuarioId      String? // Hacerlo opcional
  serie          Serie?          @relation(fields: [serieId], references: [id]) // Nueva relación con Serie
  serieId        String? // Campo para almacenar el id de la serie
  serieNumero    String // Nuevo campo para almacenar la serie con número
  bonificaciones Bonificacion[]
}

model VentaProducto {
  id           String   @id @default(uuid())
  venta        Venta    @relation(fields: [ventaId], references: [id])
  ventaId      String
  producto     Producto @relation(fields: [productoId], references: [id])
  productoId   String
  cantidad     Int
  precioVenta  Float
  precioCompra Float    @default(0) // Valor por defecto
}

model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ventas    Venta[] // Agregar esta línea para crear la relación inversa
  Compra    Compra[]
}

model Serie {
  id       String  @id @default(uuid())
  tipo     String // "factura" o "boleta"
  serie    String // Ejemplo: "F001", "B001"
  contador Int     @default(1) // Contador para las series
  ventas   Venta[] // Relación con las ventas
}

model Bonificacion {
  id         String   @id @default(cuid())
  producto   Producto @relation(fields: [productoId], references: [id])
  productoId String
  cantidad   Int      @default(1)
  createdAt  DateTime @default(now())
  venta      Venta?   @relation(fields: [ventaId], references: [id]) // Agregar relación con Venta
  ventaId    String? // Hacer referencia a la ID de la venta
}

model Proveedor {
  id        String     @id @default(uuid())
  nombre    String
  ruc       String     @unique
  direccion String
  telefono  String?
  email     String?
  productos Producto[] // Relación con productos
  createdAt DateTime   @default(now())
  Compra    Compra[]
}

model Compra {
  id          String           @id @default(uuid())
  proveedor   Proveedor        @relation(fields: [proveedorId], references: [id])
  proveedorId String
  productos   CompraProducto[] // Relación con CompraProducto
  total       Float
  fecha       DateTime         @default(now())
  usuario     Usuario?         @relation(fields: [usuarioId], references: [id]) // Relación opcional con Usuario
  usuarioId   String?
}

model CompraProducto {
  id           String   @id @default(uuid())
  compra       Compra   @relation(fields: [compraId], references: [id])
  compraId     String
  producto     Producto @relation(fields: [productoId], references: [id])
  productoId   String
  cantidad     Int
  precioCompra Float
}

model empresa {
  id         Int       @id @default(autoincrement())
  nombre     String
  direccion  String
  telefono   String
  email      String    @unique
  ruc        String    @unique @db.VarChar(11)
  logo       String?
  createdAt  DateTime  @default(now())
}

