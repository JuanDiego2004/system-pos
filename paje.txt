// app/api/clientes/route.js
import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function handler(request) {
  const method = request.method;

  switch (method) {
    case 'POST':
      return await crearCliente(request);
      
    case 'GET':
      return await obtenerClientes(request);
      
    case 'PUT':
      return await editarCliente(request);
      
    case 'DELETE':
      return await eliminarCliente(request);
      
    default:
      return NextResponse.json({ message: 'Método no permitido' }, { status: 405 });
  }
}

async function crearCliente(request) {
  try {
    const body = await request.json();
    console.log('Datos recibidos para crear cliente:', body);

    const { tipoDocumento, codigoCliente, lugar, direccion, numeroDocumento, nombre } = body;
    
    // Validación de campos requeridos
    if (!tipoDocumento || !codigoCliente || !lugar || !direccion || !numeroDocumento || !nombre) {
      return NextResponse.json({ message: 'Todos los campos son requeridos' }, { status: 400 });
    }

    // Crear el cliente en Prisma
    const cliente = await prisma.cliente.create({
      data: {
        tipoDocumento,
        codigoCliente,
        lugar,
        direccion,
        numeroDocumento,
        nombre
      },
    });

    console.log('Cliente creado en Prisma:', cliente);
    return NextResponse.json(cliente, { status: 201 });
  } catch (error) {
    console.error('Error al crear el cliente:', error);
    if (error.code === 'P2002') {
      return NextResponse.json({ message: 'El código de cliente o número de documento ya existe' }, { status: 400 });
    }
    return NextResponse.json({ message: 'Error al crear el cliente', error: error.message }, { status: 400 });
  }
}

async function obtenerClientes(request) {
  try {
    const clientes = await prisma.cliente.findMany();
    return NextResponse.json(clientes, { status: 200 });
  } catch (error) {
    console.error('Error al obtener clientes:', error);
    return NextResponse.json({ message: 'Error al obtener clientes', error: error.message }, { status: 500 });
  }
}

async function editarCliente(request) {
  try {
    const body = await request.json();
    console.log('Datos recibidos para editar cliente:', body);

    const { id, tipoDocumento, codigoCliente, lugar, direccion, numeroDocumento, nombre } = body;
    
    // Validación de campos requeridos
    if (!id || !tipoDocumento || !codigoCliente || !lugar || !direccion || !numeroDocumento || !nombre) {
      return NextResponse.json({ message: 'Todos los campos son requeridos' }, { status: 400 });
    }

    // Editar el cliente en Prisma
    const cliente = await prisma.cliente.update({
      where: { id },
      data: {
        tipoDocumento,
        codigoCliente,
        lugar,
        direccion,
        numeroDocumento,
        nombre
      },
    });

    console.log('Cliente editado en Prisma:', cliente);
    return NextResponse.json(cliente, { status: 200 });
  } catch (error) {
    console.error('Error al editar el cliente:', error);
    return NextResponse.json({ message: 'Error al editar el cliente', error: error.message }, { status: 400 });
  }
}

async function eliminarCliente(request) {
  try {
    const { id } = await request.json();
    console.log('ID recibido para eliminar cliente:', id);

    if (!id) {
      return NextResponse.json({ message: 'El ID es requerido' }, { status: 400 });
    }

    // Eliminar el cliente en Prisma
    await prisma.cliente.delete({
      where: { id },
    });

    console.log('Cliente eliminado de Prisma:', id);
    return NextResponse.json({ message: 'Cliente eliminado correctamente' }, { status: 204 });
  } catch (error) {
    console.error('Error al eliminar el cliente:', error);
    return NextResponse.json({ message: 'Error al eliminar el cliente', error: error.message }, { status: 400 });
  }
}
